<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>计算机网络 on yangcp</title>
    <link>http://localhost:61815/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
    <description>Recent content in 计算机网络 on yangcp</description>
    <generator>Hugo -- 0.147.4</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 08 Jul 2025 09:35:24 +0800</lastBuildDate>
    <atom:link href="http://localhost:61815/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>https原理</title>
      <link>http://localhost:61815/posts/network/https/</link>
      <pubDate>Tue, 08 Jul 2025 09:35:24 +0800</pubDate>
      <guid>http://localhost:61815/posts/network/https/</guid>
      <description>&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;
&lt;h3 id=&#34;http&#34;&gt;http&lt;/h3&gt;
&lt;p&gt;http是超文本传输协议，用于传输网页内容，它基于TCP，所以是可靠性传输。但是它没有解决数据安全性
方面的问题&lt;/p&gt;
&lt;h3 id=&#34;http安全方面的问题&#34;&gt;http安全方面的问题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;http没有对数据进行加密，任何人都可以随意读取这些数据，遭成数据的泄密。&lt;/li&gt;
&lt;li&gt;其次没有认证，也就是没有办法知道数据来源的可靠性，攻击者可以中间人攻击来伪造数据&lt;/li&gt;
&lt;li&gt;数据完整性，任何人可以读取也可以修改数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;https是什么&#34;&gt;https是什么&lt;/h3&gt;
&lt;p&gt;https是http的安全版本，https基于ssl，ssl基于tls。http+数据加密+认证+数据完整性就是https。&lt;/p&gt;
&lt;h3 id=&#34;https怎么解决的这些问题&#34;&gt;https怎么解决的这些问题&lt;/h3&gt;
&lt;h4 id=&#34;数据加密&#34;&gt;数据加密&lt;/h4&gt;
&lt;h5 id=&#34;加密算法&#34;&gt;加密算法&lt;/h5&gt;
&lt;p&gt;加密算法分为对称加密和非对称加密，还有一些摘要算法 / 哈希算法，一下是一些常见的加密算法&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;类型&lt;/th&gt;
          &lt;th&gt;示例&lt;/th&gt;
          &lt;th&gt;是否可逆&lt;/th&gt;
          &lt;th&gt;说明&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;对称加密&lt;/td&gt;
          &lt;td&gt;DES / AES / 3DES&lt;/td&gt;
          &lt;td&gt;✅&lt;/td&gt;
          &lt;td&gt;加密解密用同一密钥&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;非对称加密&lt;/td&gt;
          &lt;td&gt;RSA / ECC&lt;/td&gt;
          &lt;td&gt;✅&lt;/td&gt;
          &lt;td&gt;公钥加密，私钥解密&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;摘要算法&lt;/td&gt;
          &lt;td&gt;MD5 / SHA256&lt;/td&gt;
          &lt;td&gt;❌&lt;/td&gt;
          &lt;td&gt;不可逆，用于校验完整性&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;签名算法&lt;/td&gt;
          &lt;td&gt;DSA / RSA签名&lt;/td&gt;
          &lt;td&gt;❌&lt;/td&gt;
          &lt;td&gt;用私钥签名，公钥验签&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;服务器端生成密钥对，将公钥发送给客户端，客户端使用公钥加密对称加密使用的秘钥，发送给服务器端，服务器端使用私钥解密数据，
得到秘钥，后续通过这个秘钥对数据进行加密解密。&lt;/p&gt;
&lt;h4 id=&#34;ca&#34;&gt;CA&lt;/h4&gt;
&lt;p&gt;CA（Certificate Authority）是证书颁发机构，它负责签发证书，并管理证书的颁发和吊销。&lt;/p&gt;
&lt;h5 id=&#34;为什么需要ca&#34;&gt;为什么需要CA&lt;/h5&gt;
&lt;p&gt;客户端无法知晓拿到的公钥是由目标服务器颁发的，为了验证证书的合法性，防护中间人攻击，需要CA证书颁发机构签发证书。&lt;/p&gt;
&lt;h5 id=&#34;证书生成&#34;&gt;证书生成&lt;/h5&gt;
&lt;p&gt;首先，服务器管理员会向CA提起证书申请，CA会验证域名的所属权，做法通常是在域名解析加一个特定值。
验证通过后，CA会将服务器的公钥用自己的私钥进行签名，生成证书。并颁发给服务器管理员。&lt;/p&gt;
&lt;h5 id=&#34;证书验证过程&#34;&gt;证书验证过程&lt;/h5&gt;
&lt;p&gt;客户端发起连接请求，服务器会返回证书，客户端会验证证书的合法性，并获取证书的公钥。
浏览器会在发版的时候将各大CA机构的公钥预制在浏览器中，使用CA的公钥对服务器的证书进行解密，拿到解密的hash值。同时
使用同样的摘要算法对原始内容进行加密，用得到的摘要和解密的摘要对比，如果相等，说明证书是CA颁发的，也就证明
了证书的合法性和完整性。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
